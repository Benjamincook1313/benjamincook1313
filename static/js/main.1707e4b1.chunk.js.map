{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","turn","setTurn","boxes","setBoxes","counter","setCounter","active","setActive","useEffect","b","Swal","fire","checker","boxClicked","i","insert","className","onClick","split","shift","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1707e4b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Swal from 'sweetalert2';\nimport './App.css';\n\nfunction App() {\n\n\n  const [turn, setTurn] = useState('O')\n  const [boxes, setBoxes] = useState([ '', '', '', '', '', '', '', '', '',])\n  const [counter, setCounter] = useState(0)\n  const [active, setActive] = useState(true)\n\n  useEffect(()=>{\n    checker()\n  });\n  \n  function checker(){\n    const b = boxes\n    if(b[0] !== '' && b[0] === b[1] && b[0] === b[2]){\n      Swal.fire(`${b[0]} Wins`)\n      setActive(false)\n    }else if(b[3] !== '' && b[3] === b[4] && b[3] === b[5]){\n      Swal.fire(`${b[3]} Wins`)\n      setActive(false)\n    }else if(b[6] !== '' && b[6] === b[7] && b[6] === b[8]){\n      Swal.fire(`${b[6]} Wins`)\n      setActive(false)\n    }else if(b[0] !== '' && b[0] === b[3] && b[0] === b[6]){\n      Swal.fire(`${b[0]} Wins`)\n      setActive(false)\n    }else if(b[1] !== '' && b[1] === b[4] && b[1] === b[7]){\n      Swal.fire(`${b[1]} Wins`)\n      setActive(false)\n    }else if(b[2] !== '' && b[2] === b[5] && b[2] === b[8]){\n      Swal.fire(`${b[2]} Wins`)\n      setActive(false)\n    }else if(b[0] !== '' && b[0] === b[4] && b[0] === b[8]){\n      Swal.fire(`${b[0]} Wins`)\n      setActive(false)\n    }else if(b[2] !== '' && b[2] === b[4] && b[2] === b[6]){\n      Swal.fire(`${b[2]} Wins`)\n      setActive(false)\n    }else if(counter === 9){\n      Swal.fire('Draw')\n      setActive(false)\n    }else{\n      return \n    };\n  };\n  \n  const boxClicked=(i)=>{\n    let insert = [...boxes]\n    if(boxes[i] === \"O\" || boxes[i] === \"X\"){\n      return Swal.fire('choose a different box')\n    }else{\n      insert[i] = turn\n      setBoxes(insert)\n      setCounter(counter+1)\n    };\n    if(counter !== 9 && active){\n      turn === \"X\"?setTurn(\"O\"): setTurn(\"X\")\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className='top-bar'>\n        <div className='top-item'>{`${turn}'s Turn`}</div>\n        <button className='top-item' onClick={() => setBoxes([ '', '', '', '', '', '', '', '', '',])/setCounter(0)/setActive(true)}>Reset</button>\n      </div>\n      <div className='gamebox'>\n      <div className='box one' onClick={active? () => boxClicked('0'): null}>{boxes[0].split(\"'\").shift()}</div>\n        <div className='box two'onClick={active? () => boxClicked('1'): null}>{boxes[1].split(\"'\").shift()}</div>\n        <div className='box three' onClick={active? () => boxClicked('2'): null}>{boxes[2].split(\"'\").shift()}</div>\n        <div className='box four' onClick={active? () => boxClicked('3'): null}>{boxes[3].split(\"'\").shift()}</div>\n        <div className='box five' onClick={active? () => boxClicked('4'): null}>{boxes[4].split(\"'\").shift()}</div>\n        <div className='box six' onClick={active? () => boxClicked('5'): null}>{boxes[5].split(\"'\").shift()}</div>\n        <div className='box seven' onClick={active? () => boxClicked('6'): null}>{boxes[6].split(\"'\").shift()}</div>\n        <div className='box eight' onClick={active? () => boxClicked('7'): null}>{boxes[7].split(\"'\").shift()}</div>\n        <div className='box nine' onClick={active? () => boxClicked('8'): null}>{boxes[8].split(\"'\").shift()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}